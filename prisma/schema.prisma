// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  name  String?
  email String  @unique
  hash  String
}

model ApiKey {
  id     String @id @default(uuid())
  userId String
  name   String
  secret String
}

model Project {
  id     String @id @default(uuid())
  name   String
  userId String
}

model Identity {
  id       String        @id @default(uuid())
  identity String
  platform PlatformEnum?
  language LanguageEnum?
  country  CountryEnum?

  userId     String
  projectId  String
  parameters IdentityParameter[]
}

model IdentityParameter {
  id                        String   @id @default(uuid())
  isOverwritten             Boolean  @default(false)
  overwritten_string_value  String?
  overwritten_integer_value Int?
  overwritten_boolean_value Boolean?
  overwritten_json_value    Json?

  userId      String
  identity    Identity  @relation(fields: [identityId], references: [id])
  identityId  String
  parameter   Parameter @relation(fields: [parameterId], references: [id])
  parameterId String
}

model Parameter {
  id            String        @id @default(uuid())
  parameter     String
  value_type    ValueTypeEnum
  string_value  String?
  integer_value Int?
  boolean_value Boolean?
  json_value    Json?

  userId          String
  projectId       String
  conditionValues ConditionValue[]
  identities      IdentityParameter[]
}

model Condition {
  id   String @id @default(uuid())
  name String

  userId          String
  projectId       String
  conditionValues ConditionValue[]
  rules           Rule[]
}

model Rule {
  id              String        @id @default(uuid())
  rule            RuleEnum
  datetime        String?
  platform        PlatformEnum?
  language        LanguageEnum?
  country         CountryEnum?
  before_datetime Boolean?

  condition   Condition @relation(fields: [conditionId], references: [id])
  conditionId String
}

model ConditionValue {
  id            String   @id @default(uuid())
  string_value  String?
  integer_value Int?
  boolean_value Boolean?
  json_value    Json?

  parameter   Parameter @relation(fields: [parameterId], references: [id])
  parameterId String
  condition   Condition @relation(fields: [conditionId], references: [id])
  conditionId String
}

enum ValueTypeEnum {
  string
  integer
  boolean
  json
}

enum RuleEnum {
  datetime
  platform
  language
  country
}

enum PlatformEnum {
  web
  ios
  android
}

enum LanguageEnum {
  arabic
  english
}

enum CountryEnum {
  saudi_arabia
  united_states
}
