/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTimeISO";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    jsonObject<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTimeISO";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    jsonObject<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ConditionInputType: { // input type
    boolean_value?: boolean | null; // Boolean
    id?: number | null; // Int
    integer_value?: number | null; // Int
    json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    name: string; // String!
    rules: NexusGenInputs['RuleInputType'][]; // [RuleInputType!]!
    string_value?: string | null; // String
  }
  IdentityInputType: { // input type
    country?: NexusGenEnums['CountryEnum'] | null; // CountryEnum
    id?: number | null; // Int
    identity: string; // String!
    language?: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    parameters?: Array<NexusGenInputs['IdentityParameterInputType'] | null> | null; // [IdentityParameterInputType]
    platform?: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
  }
  IdentityParameterInputType: { // input type
    identityId?: number | null; // Int
    isOverwritten?: boolean | null; // Boolean
    overwritten_boolean_value?: boolean | null; // Boolean
    overwritten_integer_value?: number | null; // Int
    overwritten_json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    overwritten_string_value?: string | null; // String
    parameter?: NexusGenInputs['ParameterInputType'] | null; // ParameterInputType
  }
  ParameterInputType: { // input type
    boolean_value?: boolean | null; // Boolean
    conditions: NexusGenInputs['ConditionInputType'][]; // [ConditionInputType!]!
    integer_value?: number | null; // Int
    json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    parameter: string; // String!
    string_value?: string | null; // String
    value_type: NexusGenEnums['ValueTypeEnum']; // ValueTypeEnum!
  }
  RuleInputType: { // input type
    before_datetime?: boolean | null; // Boolean
    country?: NexusGenEnums['CountryEnum'] | null; // CountryEnum
    datetime?: NexusGenScalars['DateTimeISO'] | null; // DateTimeISO
    id?: number | null; // Int
    language?: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    platform?: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
    rule: NexusGenEnums['RuleEnum']; // RuleEnum!
  }
}

export interface NexusGenEnums {
  CountryEnum: "saudi_arabia" | "united_states"
  LanguageEnum: "arabic" | "english"
  PlatformEnum: "android" | "ios" | "web"
  RuleEnum: "country" | "datetime" | "language" | "platform"
  ValueTypeEnum: "boolean" | "integer" | "json" | "string"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTimeISO: any
  JSON: any
  JSONObject: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Condition: { // root type
    id: number; // Int!
    name: string; // String!
    projectId: number; // Int!
  }
  ConditionValue: { // root type
    boolean_value?: boolean | null; // Boolean
    conditionId: number; // Int!
    id: number; // Int!
    integer_value?: number | null; // Int
    json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    parameterId: number; // Int!
    string_value?: string | null; // String
  }
  FormattedParameters: { // root type
    parameters?: NexusGenScalars['JSONObject'] | null; // JSONObject
  }
  Identity: { // root type
    country?: NexusGenEnums['CountryEnum'] | null; // CountryEnum
    id: number; // Int!
    identity: string; // String!
    language?: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    platform?: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
    projectId: number; // Int!
  }
  IdentityParameter: { // root type
    id: number; // Int!
    identityId?: number | null; // Int
    isOverwritten: boolean; // Boolean!
    overwritten_boolean_value?: boolean | null; // Boolean
    overwritten_integer_value?: number | null; // Int
    overwritten_json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    overwritten_string_value?: string | null; // String
    parameterId: number; // Int!
  }
  Mutation: {};
  Parameter: { // root type
    boolean_value?: boolean | null; // Boolean
    id: number; // Int!
    integer_value?: number | null; // Int
    json_value?: NexusGenScalars['JSONObject'] | null; // JSONObject
    parameter: string; // String!
    projectId: number; // Int!
    string_value?: string | null; // String
    value_type: NexusGenEnums['ValueTypeEnum']; // ValueTypeEnum!
  }
  Project: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Query: {};
  Rule: { // root type
    before_datetime?: boolean | null; // Boolean
    conditionId: number; // Int!
    country?: string | null; // String
    datetime?: NexusGenScalars['DateTimeISO'] | null; // DateTimeISO
    id: number; // Int!
    language?: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    platform?: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
    rule: NexusGenEnums['RuleEnum']; // RuleEnum!
  }
  User: { // root type
    email?: string | null; // String
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Condition: { // field return type
    id: number; // Int!
    name: string; // String!
    projectId: number; // Int!
    rules: Array<NexusGenRootTypes['Rule'] | null>; // [Rule]!
  }
  ConditionValue: { // field return type
    boolean_value: boolean | null; // Boolean
    condition: NexusGenRootTypes['Condition'] | null; // Condition
    conditionId: number; // Int!
    id: number; // Int!
    integer_value: number | null; // Int
    json_value: NexusGenScalars['JSONObject'] | null; // JSONObject
    parameterId: number; // Int!
    string_value: string | null; // String
  }
  FormattedParameters: { // field return type
    parameters: NexusGenScalars['JSONObject'] | null; // JSONObject
  }
  Identity: { // field return type
    country: NexusGenEnums['CountryEnum'] | null; // CountryEnum
    id: number; // Int!
    identity: string; // String!
    language: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    parameters: Array<NexusGenRootTypes['IdentityParameter'] | null> | null; // [IdentityParameter]
    platform: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
    project: NexusGenRootTypes['Project'] | null; // Project
    projectId: number; // Int!
  }
  IdentityParameter: { // field return type
    id: number; // Int!
    identityId: number | null; // Int
    isOverwritten: boolean; // Boolean!
    overwritten_boolean_value: boolean | null; // Boolean
    overwritten_integer_value: number | null; // Int
    overwritten_json_value: NexusGenScalars['JSONObject'] | null; // JSONObject
    overwritten_string_value: string | null; // String
    parameter: NexusGenRootTypes['Parameter'] | null; // Parameter
    parameterId: number; // Int!
  }
  Mutation: { // field return type
    createCondition: NexusGenRootTypes['Condition'] | null; // Condition
    createIdentity: NexusGenRootTypes['Identity'] | null; // Identity
    createParameter: NexusGenRootTypes['Parameter'] | null; // Parameter
    createProject: NexusGenRootTypes['Project'] | null; // Project
    deleteCondition: NexusGenRootTypes['Condition'] | null; // Condition
    deleteIdentity: NexusGenRootTypes['Identity'] | null; // Identity
    deleteParameter: NexusGenRootTypes['Parameter'] | null; // Parameter
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    resetIdentityParameter: NexusGenRootTypes['IdentityParameter'] | null; // IdentityParameter
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    updateCondition: NexusGenRootTypes['Condition'] | null; // Condition
    updateIdentityParameter: NexusGenRootTypes['IdentityParameter'] | null; // IdentityParameter
    updateParameter: NexusGenRootTypes['Parameter'] | null; // Parameter
  }
  Parameter: { // field return type
    boolean_value: boolean | null; // Boolean
    conditionValues: Array<NexusGenRootTypes['ConditionValue'] | null>; // [ConditionValue]!
    id: number; // Int!
    integer_value: number | null; // Int
    json_value: NexusGenScalars['JSONObject'] | null; // JSONObject
    parameter: string; // String!
    projectId: number; // Int!
    string_value: string | null; // String
    value_type: NexusGenEnums['ValueTypeEnum']; // ValueTypeEnum!
  }
  Project: { // field return type
    id: number; // Int!
    name: string; // String!
    parameters: Array<NexusGenRootTypes['Parameter'] | null> | null; // [Parameter]
  }
  Query: { // field return type
    conditions: Array<NexusGenRootTypes['Condition'] | null> | null; // [Condition]
    formattedParameters: NexusGenRootTypes['FormattedParameters'] | null; // FormattedParameters
    getIdentity: NexusGenRootTypes['Identity'] | null; // Identity
    identities: Array<NexusGenRootTypes['Identity'] | null> | null; // [Identity]
    identityFormattedParameters: NexusGenRootTypes['FormattedParameters'] | null; // FormattedParameters
    parameters: Array<NexusGenRootTypes['Parameter'] | null> | null; // [Parameter]
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Rule: { // field return type
    before_datetime: boolean | null; // Boolean
    conditionId: number; // Int!
    country: string | null; // String
    datetime: NexusGenScalars['DateTimeISO'] | null; // DateTimeISO
    id: number; // Int!
    language: NexusGenEnums['LanguageEnum'] | null; // LanguageEnum
    platform: NexusGenEnums['PlatformEnum'] | null; // PlatformEnum
    rule: NexusGenEnums['RuleEnum']; // RuleEnum!
  }
  User: { // field return type
    email: string | null; // String
    id: number; // Int!
    name: string | null; // String
    projects: Array<NexusGenRootTypes['Project'] | null> | null; // [Project]
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Condition: { // field return type name
    id: 'Int'
    name: 'String'
    projectId: 'Int'
    rules: 'Rule'
  }
  ConditionValue: { // field return type name
    boolean_value: 'Boolean'
    condition: 'Condition'
    conditionId: 'Int'
    id: 'Int'
    integer_value: 'Int'
    json_value: 'JSONObject'
    parameterId: 'Int'
    string_value: 'String'
  }
  FormattedParameters: { // field return type name
    parameters: 'JSONObject'
  }
  Identity: { // field return type name
    country: 'CountryEnum'
    id: 'Int'
    identity: 'String'
    language: 'LanguageEnum'
    parameters: 'IdentityParameter'
    platform: 'PlatformEnum'
    project: 'Project'
    projectId: 'Int'
  }
  IdentityParameter: { // field return type name
    id: 'Int'
    identityId: 'Int'
    isOverwritten: 'Boolean'
    overwritten_boolean_value: 'Boolean'
    overwritten_integer_value: 'Int'
    overwritten_json_value: 'JSONObject'
    overwritten_string_value: 'String'
    parameter: 'Parameter'
    parameterId: 'Int'
  }
  Mutation: { // field return type name
    createCondition: 'Condition'
    createIdentity: 'Identity'
    createParameter: 'Parameter'
    createProject: 'Project'
    deleteCondition: 'Condition'
    deleteIdentity: 'Identity'
    deleteParameter: 'Parameter'
    login: 'AuthPayload'
    resetIdentityParameter: 'IdentityParameter'
    signup: 'AuthPayload'
    updateCondition: 'Condition'
    updateIdentityParameter: 'IdentityParameter'
    updateParameter: 'Parameter'
  }
  Parameter: { // field return type name
    boolean_value: 'Boolean'
    conditionValues: 'ConditionValue'
    id: 'Int'
    integer_value: 'Int'
    json_value: 'JSONObject'
    parameter: 'String'
    projectId: 'Int'
    string_value: 'String'
    value_type: 'ValueTypeEnum'
  }
  Project: { // field return type name
    id: 'Int'
    name: 'String'
    parameters: 'Parameter'
  }
  Query: { // field return type name
    conditions: 'Condition'
    formattedParameters: 'FormattedParameters'
    getIdentity: 'Identity'
    identities: 'Identity'
    identityFormattedParameters: 'FormattedParameters'
    parameters: 'Parameter'
    projects: 'Project'
    users: 'User'
  }
  Rule: { // field return type name
    before_datetime: 'Boolean'
    conditionId: 'Int'
    country: 'String'
    datetime: 'DateTimeISO'
    id: 'Int'
    language: 'LanguageEnum'
    platform: 'PlatformEnum'
    rule: 'RuleEnum'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    projects: 'Project'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCondition: { // args
      data: NexusGenInputs['ConditionInputType']; // ConditionInputType!
      projectId: number; // Int!
    }
    createIdentity: { // args
      data: NexusGenInputs['IdentityInputType']; // IdentityInputType!
      projectId: number; // Int!
    }
    createParameter: { // args
      data: NexusGenInputs['ParameterInputType']; // ParameterInputType!
      projectId: number; // Int!
    }
    createProject: { // args
      name: string; // String!
    }
    deleteCondition: { // args
      conditionId: number; // Int!
      projectId: number; // Int!
    }
    deleteIdentity: { // args
      identityId: number; // Int!
    }
    deleteParameter: { // args
      parameterId: number; // Int!
      projectId: number; // Int!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    resetIdentityParameter: { // args
      identityParameterId: number; // Int!
    }
    signup: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    updateCondition: { // args
      conditionId: number; // Int!
      data: NexusGenInputs['ConditionInputType']; // ConditionInputType!
      projectId: number; // Int!
    }
    updateIdentityParameter: { // args
      data: NexusGenInputs['IdentityParameterInputType']; // IdentityParameterInputType!
      identityParameterId: number; // Int!
    }
    updateParameter: { // args
      data: NexusGenInputs['ParameterInputType']; // ParameterInputType!
      parameterId: number; // Int!
      projectId: number; // Int!
    }
  }
  Query: {
    conditions: { // args
      projectId: number; // Int!
    }
    formattedParameters: { // args
      projectId: number; // Int!
    }
    getIdentity: { // args
      identityId: number; // Int!
    }
    identities: { // args
      projectId: number; // Int!
    }
    identityFormattedParameters: { // args
      identity: string; // String!
      projectId: number; // Int!
    }
    parameters: { // args
      projectId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}