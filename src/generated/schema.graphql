### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Condition {
  id: Int!
  name: String!
  projectId: Int!
  rules: [Rule]!
}

input ConditionInputType {
  boolean_value: Boolean
  id: Int
  integer_value: Int
  json_value: JSONObject
  name: String!
  rules: [RuleInputType!]! = []
  string_value: String
}

type ConditionValue {
  boolean_value: Boolean
  condition: Condition
  conditionId: Int!
  id: Int!
  integer_value: Int
  json_value: JSONObject
  parameterId: Int!
  string_value: String
}

enum CountryEnum {
  saudi_arabia
  united_states
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type FormattedParameters {
  parameters: JSONObject
}

type Identity {
  country: CountryEnum
  id: Int!
  identity: String!
  language: LanguageEnum
  parameters: [IdentityParameter]
  platform: PlatformEnum
  project: Project
  projectId: Int!
}

input IdentityInputType {
  country: CountryEnum
  id: Int
  identity: String!
  language: LanguageEnum
  parameters: [IdentityParameterInputType]
  platform: PlatformEnum
}

type IdentityParameter {
  id: Int!
  identityId: Int
  isOverwritten: Boolean!
  overwritten_boolean_value: Boolean
  overwritten_integer_value: Int
  overwritten_json_value: JSONObject
  overwritten_string_value: String
  parameter: Parameter
  parameterId: Int!
}

input IdentityParameterInputType {
  identityId: Int
  isOverwritten: Boolean
  overwritten_boolean_value: Boolean
  overwritten_integer_value: Int
  overwritten_json_value: JSONObject
  overwritten_string_value: String
  parameter: ParameterInputType
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LanguageEnum {
  arabic
  english
}

type Mutation {
  createCondition(data: ConditionInputType!, projectId: Int!): Condition
  createIdentity(data: IdentityInputType!, projectId: Int!): Identity
  createParameter(data: ParameterInputType!, projectId: Int!): Parameter
  createProject(name: String!): Project
  deleteCondition(conditionId: Int!, projectId: Int!): Condition
  deleteParameter(parameterId: Int!, projectId: Int!): Parameter
  login(email: String!, password: String!): AuthPayload
  resetIdentityParameter(identityParameterId: Int!): IdentityParameter
  signup(email: String!, name: String!, password: String!): AuthPayload
  updateCondition(conditionId: Int!, data: ConditionInputType!, projectId: Int!): Condition
  updateIdentityParameter(data: IdentityParameterInputType!, identityParameterId: Int!): IdentityParameter
  updateParameter(data: ParameterInputType!, parameterId: Int!, projectId: Int!): Parameter
}

type Parameter {
  boolean_value: Boolean
  conditionValues: [ConditionValue]!
  id: Int!
  integer_value: Int
  json_value: JSONObject
  parameter: String!
  projectId: Int!
  string_value: String
  value_type: ValueTypeEnum!
}

input ParameterInputType {
  boolean_value: Boolean
  conditions: [ConditionInputType!]! = []
  integer_value: Int
  json_value: JSONObject
  parameter: String!
  string_value: String
  value_type: ValueTypeEnum!
}

enum PlatformEnum {
  android
  ios
  web
}

type Project {
  id: Int!
  name: String!
  parameters: [Parameter]
}

type Query {
  conditions(projectId: Int!): [Condition]
  formattedParameters(projectId: Int!): FormattedParameters
  identities(projectId: Int!): [Identity]
  identityFormattedParameters(identity: String!, projectId: Int!): FormattedParameters
  parameters(projectId: Int!): [Parameter]
  projects: [Project]
  users: [User]
}

type Rule {
  before_datetime: Boolean
  conditionId: Int!
  country: String
  datetime: DateTimeISO
  id: Int!
  language: LanguageEnum
  platform: PlatformEnum
  rule: RuleEnum!
}

enum RuleEnum {
  country
  datetime
  language
  platform
}

input RuleInputType {
  before_datetime: Boolean
  country: CountryEnum
  datetime: DateTimeISO
  id: Int
  language: LanguageEnum
  platform: PlatformEnum
  rule: RuleEnum!
}

type User {
  email: String
  id: Int!
  name: String
  projects: [Project]
}

enum ValueTypeEnum {
  boolean
  integer
  json
  string
}